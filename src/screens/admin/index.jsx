import React, { useEffect, useMemo, useState } from 'react';
import c from './admin.module.scss';
import { useNavigate } from 'react-router-dom';
import { BiArrowBack } from 'react-icons/bi';
import { fetchJson } from '../../api';

const Admin = () => {
  const navigate = useNavigate();

  // === –ì–ê–†–î –î–û–°–¢–£–ü–ê ===
  const [authChecked, setAuthChecked] = useState(false);

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const me = await fetchJson('/api/auth/me');
        const isSuper = Boolean(me.is_superuser);
        const isStaff = Boolean(me.is_staff);
        if (!isSuper && !isStaff) {
          // –Ω–µ—Ç –ø—Ä–∞–≤ ‚Äî —É–≤–æ–¥–∏–º –Ω–∞ /
          navigate('/', { replace: true });
          return;
        }
      } catch (e) {
        // –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω/–æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∂–µ —É–≤–æ–¥–∏–º –Ω–∞ /
        navigate('/', { replace: true });
        return;
      } finally {
        if (mounted) setAuthChecked(true);
      }
    })();
    return () => { mounted = false; };
  }, [navigate]);

  // UI state
  const [entrance, setEntrance] = useState('all');   // —Å–µ–ª–µ–∫—Ç "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫"
  const [query, setQuery] = useState('');            // –ø–æ–∏—Å–∫
  const [selectedApartment, setSelectedApartment] = useState(null);

  // data state
  const [apartments, setApartments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState('');

  // –¥–µ–±–∞—É–Ω—Å –ø–æ–∏—Å–∫–∞
  const [debouncedQuery, setDebouncedQuery] = useState('');
  useEffect(() => {
    const t = setTimeout(() => setDebouncedQuery(query.trim()), 300);
    return () => clearTimeout(t);
  }, [query]);

  // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
  useEffect(() => {
    if (!authChecked) return; // –∂–¥—ë–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
    let mounted = true;
    (async () => {
      try {
        setLoading(true);
        setErr('');

        const params = new URLSearchParams();
        // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–æ–º—É: params.set('house','20')
        if (entrance !== 'all') params.set('entrance', entrance);
        if (debouncedQuery) params.set('search', debouncedQuery);

        const data = await fetchJson(`/api/apartments?${params.toString()}`);
        const list = Array.isArray(data) ? data : (data.results || []);
        if (mounted) setApartments(list);
      } catch (e) {
        if (mounted) setErr(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã');
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, [authChecked, entrance, debouncedQuery]);

  // –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø
  const openApartment = async (ap) => {
    try {
      const detail = await fetchJson(`/api/apartments/${ap.id}/`);
      setSelectedApartment(detail);
    } catch {
      setSelectedApartment(ap);
    }
  };

  // –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
  const toggleBlock = async () => {
    if (!selectedApartment) return;
    try {
      if (selectedApartment.is_blocked || selectedApartment.status === '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞') {
        // –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨
        const updated = await fetchJson(`/api/apartments/${selectedApartment.id}/`, {
          method: 'PATCH',
          body: JSON.stringify({ is_blocked: false }),
        });
        setSelectedApartment(updated);
      } else {
        // –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨
        await fetchJson(`/api/apartments/${selectedApartment.id}/block/`, {
          method: 'PATCH',
        });
        const updated = await fetchJson(`/api/apartments/${selectedApartment.id}/`);
        setSelectedApartment(updated);
      }

      // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
      const params = new URLSearchParams();
      if (entrance !== 'all') params.set('entrance', entrance);
      if (debouncedQuery) params.set('search', debouncedQuery);
      const refreshed = await fetchJson(`/api/apartments?${params.toString()}`);
      const list = Array.isArray(refreshed) ? refreshed : (refreshed.results || []);
      setApartments(list);
    } catch (e) {
      alert('–ù–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
    }
  };

  // –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const statusLabel = useMemo(() => {
    if (!selectedApartment) return '';
    const blocked = selectedApartment.is_blocked ?? (selectedApartment.status === '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
    return blocked ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞';
  }, [selectedApartment]);

  // –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (—á—Ç–æ–±—ã –Ω–µ –º–∏–≥–∞–ª UI)
  if (!authChecked) return null;

  return (
    <div className={c.admin}>
      {/* –ù–∞–∑–∞–¥ */}
      <div className={c.back} onClick={() => navigate('/')}>
        <BiArrowBack />
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <input
        type="text"
        placeholder="–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
      />

      {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—ä–µ–∑–¥—É/–±–ª–æ–∫—É */}
      <select
        value={entrance}
        onChange={(e) => setEntrance(e.target.value)}
      >
        <option value="all">–í—Å–µ –±–ª–æ–∫–∏</option>
        <option value="1">1</option>
        <option value="2">2</option>
        {/* –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å 3,4 ... */}
      </select>

      <h2>–ë–ª–æ–∫: {entrance === 'all' ? '–í—Å–µ' : entrance}</h2>

      {/* –°–ø–∏—Å–æ–∫/—Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      {loading && <div className={c.loading}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>}
      {err && <div className={c.error}>{err}</div>}

      <div className={c.apartments}>
        {!loading && !err && apartments.map((ap) => (
          <button key={ap.id} onClick={() => openApartment(ap)}>
            {ap.number}{ap.is_blocked ? ' üîí' : ''}
          </button>
        ))}
        {!loading && !err && apartments.length === 0 && (
          <div className={c.empty}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
        )}
      </div>

      {/* Popup */}
      {selectedApartment && (
        <div className={c.popupOverlay} onClick={() => setSelectedApartment(null)}>
          <div className={c.popup} onClick={(e) => e.stopPropagation()}>
            <h3>–ö–≤–∞—Ä—Ç–∏—Ä–∞ ‚Ññ{selectedApartment.number}</h3>
            <p><b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {selectedApartment.owner_name || '‚Äî'}</p>
            <p><b>–°—Ç–∞—Ç—É—Å:</b> {statusLabel}</p>

            <button className={c.blockBtn} onClick={toggleBlock}>
              {statusLabel === '–ê–∫—Ç–∏–≤–Ω–∞' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Admin;
